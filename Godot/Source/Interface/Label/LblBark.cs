using Godot;
using System;
using System.Collections.Generic;

public partial class LblBark : Label
{
    private Vector2 _originalPosition = new();
    [Export]
    private AnimationPlayer _anim;

    public override void _Ready()
    {
        _originalPosition = Position;
    }

    // summary generated by chat gippity!!!!
    /// <summary>
    /// Displays a bark in the label.
    /// </summary>
    /// <param name="text">The text of the bark to display.</param>
    /// <remarks>
    /// If an animation is playing, it stops and appends the new text.
    /// If no animation is playing, it sets the label's text to the provided text.
    /// Plays the "AnimBark" animation after handling the text.
    /// </remarks>
    public void Bark(string text)
    {
        // GD.Print(GetGlobalRect().Intersects)
        if (_anim.IsPlaying())
        {
            _anim.Stop();
            Text = text;

        }
        else
        {
            Text = text;
        }
        _anim.Play("AnimBark");
    }

    internal void SetCorrectedPosition(string barkText, List<LblBark> otherBarkLbls)
    {
        if (barkText == "")
        {
            return;
        }
        Position = _originalPosition;
        foreach (LblBark b in otherBarkLbls)
        {

            if (GetGlobalRect().Intersects(b.GetGlobalRect()))
            {
                Rect2 intersection = GetGlobalRect().Intersection(b.GetGlobalRect());

                Vector2 moveDirection = b.GlobalPosition - GlobalPosition;

                b.GlobalPosition += moveDirection.Normalized() * intersection.Size.X;
            }
        }
    }
}
